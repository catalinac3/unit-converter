{"version":3,"sources":["UserInput.js","Output.js","App.js","index.js"],"names":["userInput","props","type","onChange","changed","unitChanged","value","selected","Output","className","name","number","App","state","units","abbr","unitSelected","inputField","conversionFactors","unit","unitConversion","event","setUnit","setState","target","toFixed","UserInput","this","map","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAkBeA,EAhBG,SAACC,GACjB,OACE,8BACE,iCACE,2CACA,uBAAOC,KAAK,OAAOC,SAAUF,EAAMG,UACnC,yBAAQD,SAAUF,EAAMI,YAAxB,UACE,wBAAQC,MAAM,KAAd,gBACA,wBAAQC,UAAQ,EAACD,MAAM,IAAvB,eACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,yBCHKE,EAPA,SAACP,GACd,OACE,qBAAKQ,UAAY,SAAjB,SACE,kCAAKR,EAAMS,KAAX,MAAoBT,EAAMU,OAA1B,UC8GSC,E,4MA7GbC,MAAQ,CACNC,MAAO,CACL,CAAEJ,KAAM,cAAeC,OAAQ,IAAKI,KAAM,MAC1C,CAAEL,KAAM,SAAUC,OAAQ,IAAKI,KAAM,KACrC,CAAEL,KAAM,SAAUC,OAAQ,IAAKI,KAAM,MACrC,CAAEL,KAAM,OAAQC,OAAQ,IAAKI,KAAM,OAErCC,aAAc,CAAEV,MAAO,KACvBW,WAAY,CAAEX,MAAO,M,EAGvBY,kBAAoB,SAACC,GACnB,OAAQA,GACN,IAAK,IACH,MAAO,CAAC,IAAK,EAAG,MAAO,MACzB,IAAK,KACH,MAAO,CAAC,EAAG,IAAM,IAAM,MACzB,IAAK,KACH,MAAO,CAAC,KAAM,MAAQ,EAAG,MAC3B,IAAK,KACH,MAAO,CAAC,MAAO,KAAO,GAAI,K,EAKhCC,eAAiB,SAACC,GAChB,IAAMC,EAAU,EAAKJ,kBAAkB,EAAKL,MAAMG,aAAaV,OAE/D,EAAKiB,SAAS,CACZT,MAAO,CACL,CACEJ,KAAM,cACNC,QAASU,EAAMG,OAAOlB,MAAQgB,EAAQ,IAAIG,QAAQ,GAClDV,KAAM,MAER,CACEL,KAAM,SACNC,QAASU,EAAMG,OAAOlB,MAAQgB,EAAQ,IAAIG,QAAQ,GAClDV,KAAM,KAER,CACEL,KAAM,SACNC,QAASU,EAAMG,OAAOlB,MAAQgB,EAAQ,IAAIG,QAAQ,GAClDV,KAAM,MAER,CACEL,KAAM,OACNC,QAASU,EAAMG,OAAOlB,MAAQgB,EAAQ,IAAIG,QAAQ,GAClDV,KAAM,OAGVE,WAAY,CAAEX,MAAOe,EAAMG,OAAOlB,U,EAKtCU,aAAe,SAACK,GACd,IAAMC,EAAU,EAAKJ,kBAAkBG,EAAMG,OAAOlB,OACpD,EAAKiB,SAAS,CACZT,MAAO,CACL,CACEJ,KAAM,cACNC,QAAS,EAAKE,MAAMI,WAAWX,MAAQgB,EAAQ,IAAIG,QAAQ,GAC3DV,KAAM,MAER,CACEL,KAAM,SACNC,QAAS,EAAKE,MAAMI,WAAWX,MAAQgB,EAAQ,IAAIG,QAAQ,GAC3DV,KAAM,KAER,CACEL,KAAM,SACNC,QAAS,EAAKE,MAAMI,WAAWX,MAAQgB,EAAQ,IAAIG,QAAQ,GAC3DV,KAAM,MAER,CACEL,KAAM,OACNC,QAAS,EAAKE,MAAMI,WAAWX,MAAQgB,EAAQ,IAAIG,QAAQ,GAC3DV,KAAM,OAGVC,aAAc,CAAEV,MAAOe,EAAMG,OAAOlB,U,4CAIxC,WAAU,IAAD,OAEP,OACE,qCACE,uDAEA,qBAAKG,UAAU,cAAf,SACE,cAACiB,EAAD,CACErB,YAAasB,KAAKX,aAClBZ,QAASuB,KAAKP,eAEdD,KAAMQ,KAAKd,MAAMC,MAAM,GAAGH,WAI7BgB,KAAKd,MAAMC,MAAMc,KAAI,SAACT,GACrB,GAAI,EAAKN,MAAMG,aAAaV,OAASa,EAAKJ,KACxC,OAAO,cAAC,EAAD,CAAQL,KAAMS,EAAKT,KAAMC,OAAQQ,EAAKR,mB,GAvGvCkB,aCFlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.3e78e9b7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst userInput = (props) => {\r\n  return (\r\n    <div>\r\n      <form>\r\n        <label>Lenght</label>\r\n        <input type=\"text\" onChange={props.changed}></input>\r\n        <select onChange={props.unitChanged}>\r\n          <option value=\"cm\">cm</option>\r\n          <option selected value=\"m\">m</option>\r\n          <option value=\"in\">in</option>\r\n          <option value=\"ft\">ft</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default userInput;\r\n","import React from \"react\";\r\n\r\nconst Output = (props) => {\r\n  return (\r\n    <div className = \"Output\">\r\n      <p> {props.name} = {props.number} </p>\r\n    </div>\r\n  );\r\n};\r\nexport default Output;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport UserInput from \"./UserInput\";\nimport Output from \"./Output\";\n\nclass App extends Component {\n  state = {\n    units: [\n      { name: \"centimeters\", number: \"0\", abbr: \"cm\" },\n      { name: \"meters\", number: \"0\", abbr: \"m\" },\n      { name: \"inches\", number: \"0\", abbr: \"in\" },\n      { name: \"feet\", number: \"0\", abbr: \"ft\" },\n    ],\n    unitSelected: { value: \"m\" },\n    inputField: { value: \"0\" },\n  };\n\n  conversionFactors = (unit) => {\n    switch (unit) {\n      case \"m\":\n        return [100, 1, 39.37, 3.28];\n      case \"cm\":\n        return [1, 0.01, 0.39, 0.033];\n      case \"in\":\n        return [2.54, 0.0254, 1, 0.083];\n      case \"ft\":\n        return [30.48, 0.305, 12, 1];\n    }\n  };\n\n  /*trigger by the change of the input field */\n  unitConversion = (event) => {\n    const setUnit = this.conversionFactors(this.state.unitSelected.value);\n\n    this.setState({\n      units: [\n        {\n          name: \"centimeters\",\n          number: (event.target.value * setUnit[0]).toFixed(2),\n          abbr: \"cm\",\n        },\n        {\n          name: \"meters\",\n          number: (event.target.value * setUnit[1]).toFixed(2),\n          abbr: \"m\",\n        },\n        {\n          name: \"inches\",\n          number: (event.target.value * setUnit[2]).toFixed(2),\n          abbr: \"in\",\n        },\n        {\n          name: \"feet\",\n          number: (event.target.value * setUnit[3]).toFixed(2),\n          abbr: \"ft\",\n        },\n      ],\n      inputField: { value: event.target.value },\n    });\n  };\n\n  // trigger by change on the dropbox\n  unitSelected = (event) => {\n    const setUnit = this.conversionFactors(event.target.value);\n    this.setState({\n      units: [\n        {\n          name: \"centimeters\",\n          number: (this.state.inputField.value * setUnit[0]).toFixed(2),\n          abbr: \"cm\",\n        },\n        {\n          name: \"meters\",\n          number: (this.state.inputField.value * setUnit[1]).toFixed(2),\n          abbr: \"m\",\n        },\n        {\n          name: \"inches\",\n          number: (this.state.inputField.value * setUnit[2]).toFixed(2),\n          abbr: \"in\",\n        },\n        {\n          name: \"feet\",\n          number: (this.state.inputField.value * setUnit[3]).toFixed(2),\n          abbr: \"ft\",\n        },\n      ],\n      unitSelected: { value: event.target.value },\n    });\n  };\n\n  render() {\n    // let numberInInput = parseInt(this.state.inputField.value).toFixed(2);\n    return (\n      <>\n        <h1>Length Unit Converter</h1>\n\n        <div className=\"input-group\">\n          <UserInput\n            unitChanged={this.unitSelected}\n            changed={this.unitConversion}\n            // changed={this.unitConversion.bind(this,unit)}\n            unit={this.state.units[0].number}\n          />\n        </div>\n\n        {this.state.units.map((unit) => {\n          if (this.state.unitSelected.value != unit.abbr) {\n            return <Output name={unit.name} number={unit.number} />;\n          }\n        })}\n      </>\n    );\n  }\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}